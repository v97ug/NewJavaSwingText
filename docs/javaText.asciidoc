:sectnums:
:chapter-label:
:toc: left
:toc-title: 目次
:toclevels: 2
:source-highlighter: coderay

//:language: asciidoc
//:source-language: {language}
//:page-layout: docs
//
//:long-value:

= Javaゲームプログラミングコース

== 導入

=== まず、Javaコースでは何をするの？

このコースでは、Javaで簡単なゲームを作っていきます。

１日目は、Javaの基礎知識やSwingの使い方、簡単なゲームの作り方を学びます。

２、３日目は、初日で学んだ知識をもとにゲームを作っていきます。何人かのチームに分かれてゲームを作っていきましょう。

最終日は、作ったゲームをみんなでプレイしましょう！

=== Javaってなあに？

Java（じゃば）は、プログラミング言語の１つで、オブジェクト指向という考え方をもとに作られました。

=== Swingってなあに？

Swing(スウィング)とは、画面を出すためのライブラリです。（後に詳しく説明します）

=== Javaって何に使われているの？

一番メジャーなのは、Androidでしょう。そう、みなさんが持っているであろう、Androidのスマホは実はJavaで動いているのです。

<<<

== Eclipeを使おう

=== Eclipseとは
EclipseとはJavaの統合開発環境と呼ばれるもので、これひとつで、Javaプログラミング、コンパイル、実行のすべてができるツールです。さらにデバッグも自動で行ってくれるため、プログラミングの効率も向上するでしよう。

=== Eclipseの使い方
では、さっそく Eclipseを使ってみましょう。

まず、Eclipseを起動すると、このようなものが出てきます。
ここは、そのままOKを押してください。

image::two/img/2_1.png[]

すると↓の画面がでてくるので、workbenchをクリック

image::two/img/2_2.png[500,500]

この画面が出てきます。

image::two/img/2_3.png[500,500]

次に、Project Explorerとかいてあるところの下の、白い枠を右クリックし、
New　→　Project を選択します。


Java Project を選択して、Next> をクリック

image::two/img/2_4.png[500,500]

Project name: のところに、今回は、HelloWorldと入力。

image::two/img/2_5.png[500,500]

このような画面がでてきます。

image::two/img/2_6.png[500,500]

HelloWorldのところをダブルクリックすると、srcというフォルダが出てきます。

srcを右クリック → New → Class を選択

次に

1. Name: のところに、HelloWorldと入力

2. public static void main(String[] args)　のところにチェックを入れる

3. Finishをクリック

image::two/img/2_7.png[500,500]

[NOTE]
====
ここで２つ注意しておくことがあります。

* １つのファイルには、１つのクラスのみかく。
* クラスの名前とファイルの名前は同じにする。

これらのことに注意してプログラムをするようにしてください。
====

Finishをクリックすると、この画面がでてきます。

image::two/img/2_8.png[500,500]

ここで、ちょとしたプログラムをかいてみます。
`public static void main(String[] args){` という行の下に、
```java
System.out.println("Hello World");
```
と追加します。

プログラムを実行するときは、左上の緑色の三角ボタンを押してください。

image::two/img/2_9.png[500,500]

=== 補完機能を使うには

他のIDEを使ったことのある方はご存知かと思いますが、たいていのIDEには補完機能という、予測変換みたいな機能があります。

Eclipseで補完機能を使うには、以下の設定をする必要があります。上のバーから、Window -> Preferencesをクリック（Mac環境では、``Command + ,``でPreferencesが開きます ）。

image::two/img/content-assist.png[500,500]

Preferencesの画面が開いたら、Java -> Editor -> Content Assistを開きます。

``Auto activation triggers for Java:``のところに、アルファベット全てを追加してみましょう。一字ずつ入力するのは面倒なので、「半角アルファベット 一覧」などで検索してみましょう。

```
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
```

こうすれば、Eclipseでも補完機能を使えるようになります。

<<<

== Swing

この章では、Swingというパッケージを使って、簡単なものを作っていきます。

=== Swingとは

Javaで作成するプログラムをアプリケーションといいます。この中で、GUIアプリケーションを作るのに使われるパッケージ（ライブラリ）が、Swingです。ちなみに、GUIとは、Graphical User Interfaceの略で、画面が出てくるアプリケーションのことです。

=== Swing の基本スタイル

今回は、このテンプレートを使って、ゲームを作っていきたいと思います。まず、以下のコードを実行してみましょう。

[source, java]
----
include::three/code/MyJPanel.java[lines=2..-1]
----

実行結果：

image::three/img/resultOfSwingSample1.png[scaledwidth="50%"]

何もないウィンドウが表示されたと思います。Javaコースではこのウィンドウを使って、いろいろなアプリケーションを作っていくことになります。mainメソッドの中に、heightとwidthという変数があると思いますが、これの変数は画面の縦横の大きさが格納されています。

画面の大きさを変更したいときは、heightとwidthの値を変えてやれば、画面が大きくなったり小さくなったりします。

何もないと味気ないので、文字を表示するアプリケーションを作ってみましょう。「Hello World!」と表示するために、さっきのコードを少し変えましょう。変えるのは、MyJPanelクラスの中の、while文の中にひとこと追加するだけです。

```java
while(true){
    g.drawString("Hello, world!" ,100,100); //追加！
    wg.drawImage(img, 0, 0, null);
}
```

最初に作ったウィンドウに、Hello, Worldという文字が表示されると思います。

==== drawString(string, x, y)
ここで、drawStringの定義を見てみましょう。

第１引数　:　表示する文字列

第２引数　:　表示するｘ座標

第３引数　:　表示するｙ座標

注意点として、ここでいうxとｙは、左から数えてxピクセル、上から数えてｙピクセルという意味です。Swingは基準点が左上なので、気をつけてください。

==== 余力のある人は、フォントも設定してみよう

``drawString``メソッドは、フォントを設定することもできます。``setFont``メソッドを使って以下のようにすると、フォントを設定できます。

[source, java]
----
include::three/code/MyJPanelString.java[lines=12..17]
----


=== 図形、画像の表示

今度は、Graphicsクラスを使って図形を描いてみましょう。Graphicsクラスを使うと、線を引いたり四角形を描いたりできます。
他にも背景の色を変更したり、見た目をいろいろと変更することができます。

まず、以下のコードを実行してみましょう。while文の中を変えるだけですね。

[source, java]
----
include::three/code/MyJPanel2.java[lines=5..-1]
----

実行結果：

image::three/img/resultOfSwingSample3.png[scaledwidth="50%"]

それぞれのメソッドについて解説します。

====  四角形を描く
四角形を描くには、``drawRect``もしくは``fillRect``メソッドを使います。

```java
drawRect(x, y, width, height)
fillRect(x, y, width, height)
```

``drawRect(x,y,width,height)``と指定すると、座標(x,y)を四角形の左上の頂点として、高さがheight、幅がwidthの長方形が描かれます。

``drawRect``は四角形の外枠だけが描かれて、``fillRect``は中が塗りつぶされた四角形を描くことができます。

==== 円を描く
円を描くには、``drawOval``もしくは``fillOval``メソッドを使います。

```java
drawOval(x, y, width, height)
fillOval(x, y, width, height)
```

``drawOval``メソッドは、座標（x,y）を左上とした、高さ``height``、幅``width``の四角形の中にすっぽり入る円を描くことができます。
``fillOval``で、中が塗りつぶされた円を描くこともできます。

image::three/img/drawOval.png[scaledwidth="50%"]

====  角度を指定して、円（孤）を描く
角度を指定して円を描くには、``drawArc``もしくは``fillArc``メソッドを使います。

```java
drawArc(x1, y1, x2, y2, arc1, arc2)
fillArc(x1, y1, x2, y2, arc1, arc2)
```

``drawArc``メソッドは、座標(x1,y1）と（x2,y2）を対角線（右下がり）とする四角形の中にすっぽり入るような円が描けます。``arc1``と``arc2``で角度を指定すれば、arc1からarc2までの角度の扇型を描くことができます。例えば、0,360とすれば、一回転なので、ふつうの円が描けます。30,300とすれば、パックマンが出来上がります（笑）。

==== 色を指定する
描く図形の色を指定したい場合は、``setColor``を使います。

```java
setColor(Color.BLUE)
```

図形を描く前に、``setColor``を使えば、図形に色をつけられます。
例えば、

```java
g.setColor(Color.BLUE);
g.fillOval(0, 0, 100, 100);
```

とすれば、青色の円が描けると思います。

他にも様々な色が指定できます。

|===
|コード |色

| Color.BLACK | [black]#黒#
| Color.BLUE | [blue]#青#
| Color.GRAY | pass:[<span style="color:#C0C0C0">灰色</span>]
| Color.GREEN | [green]#緑#
| Color.ORANGE | pass:[<span style="color:#FFA500">オレンジ</span>]
| Color.PINK | pass:[<span style="color:#FFC0CB">ピンク</span>]
| Color.RED | [red]#赤#
| Color.WHITE | [white]#白#
| Color.YELLOW | [yellow]#黄色#
|===

また、数字で厳密にカラーコードを指定することも可能です。

```java
g.setColor(new Color(127,255,212));
```

==== 画像を表示する
次に、画像を表示してみましょう。
今回は、こちらでは特に画像を用意していないので、自分で好きな画像をネットからダウンロードしましょう。

===== 画像を保存する手順

====== 1. firefoxを起動
image:three/img/firefox.png[scaledwidth="10%"]

====== 2. 画像を適当に検索して、画像を保存。

====== 3. eclipse で、img というフォルダを作る。

srcを右クリックして、``New → Folder``を選択します。画像を入れるフォルダなので、フォルダ名は``img``としておきましょう。

====== 4. 保存した画像を、eclipseのimgフォルダへドラッグ＆ドロップ


===== 画像を表示してみよう

画像の保存が無事終わったところで、今度は画像を表示するコードをかいてみましょう。

[source, java]
----
include::three/code/MyJPanelImage.java[lines=13..31]
----

画像を読み込むには ``ImageIO.read``　メソッドを使い、画像を表示するには　``drawImage``　メソッドを使います。サンプルでは、aizu.pngを読み込んでいます。

``new File``は、ファイルを開く命令です。

それらを囲んでいる``try``と``catch``は、例外処理といって、エラーを処理するときに使いますが、今はあまり気にしなくて大丈夫です。

画像を読み込んだら、あとは``drawImage``メソッドで描くだけです。

```java
drawImage(image, x, y, this);
```

第１引数``image``には、先ほどファイルを読み込んで格納した変数をいれます。ここでは、変数``image``がそれにあたります。

x,yは、画像の位置ですね。左上が基準点になっているので注意です。

第４引数は、``this``（もしくは``null``）を入れれば大丈夫です。

<<<

== キー入力

この章では、ゲーム作りでも重要な、キー入力をどうすればよいかを学びます。

=== 新しいプロジェクトを作ろう

今まで、１つのプロジェクトの中でプログラムをかいてきましたが、ここで、新しく別のプロジェクトを作ってみましょう。

第２章でやったように、``ProjectExplorer``のところを右クリックして、``New→Project``で新しくプロジェクトが作れます。
名前は適当につけてください。

プロジェクトを作ったら、以前のプロジェクトから2つのファイルをコピー＆ペーストしてきましょう。

次に、以下のコードを、Key.javaとしてクラスを作りましょう。

[source,java]
----
include::four/code/Key.java[lines=3..-1]
----

このクラスでやっていることは、キーが押されている間、変数がtrueになるということだけです。例えば、Upキーが押されていると、その間だけ、変数``up``の値がtrueになります。そのキーを離すと、変数の値が``false``になります。

Keyクラスが作れたところで、今度はこのクラスの使い方を学びましょう。

今度は、MyJPanel.javaを編集していきます。変更箇所は、while文の中身です。

[source, java]
----
include::four/code/MyJPanel.java[lines=3..-1]
----

また、mainメソッドの中身も少しだけ追加します。終わりのほうに、``frame.addKeyListener(new Key());``を追加します。

[source, java]
----
include::four/code/SwingSample1.java[lines=3..-1]
----

``addKeyListener``をしないと、キー操作を受け付けないので、追加し忘れないようにしましょう。

ここまでくれば、プログラムがちゃんと実行できるようになると思います。


==== Keyクラスの使い方

```java
if(Key.up){
    g.setColor(Color.BLACK);
    g.drawString("UP!",100,100);
}
```
``if(Key.up)``で、Upキーが押されているかどうかを判定します。もし押されていれば、括弧の中の処理を実行します。
他のキーでも同じです。

==== Thread.sleep（_ _） ..zzzZZ
また、while文の終わりの方に``Thread.sleep(10)``などの文が追加されていますね。これは、10ミリ秒だけプログラムの動きを止めます。

```java
try {
    Thread.sleep(10);
} catch (InterruptedException e) {
    e.printStackTrace();
}
```

なぜこうするかというと、動きを少しずつ止めていかないと、描画のスピードが追いつかなくなったり、動きが重くなったりするからです。

``Thread.sleep``を囲んでいる``try catch``文は、例外処理というおまじないです。

<<<

== 簡単なゲームを作ってみよう

この章では、今までで学んだ知識を元に、簡単なゲームを作っていきたいと思います。

今回は、以下のような、主人公をキー操作で動かすようなプログラムを作ってみましょう。

image::five/img/sample-result.png[scaledwidth="50%"]

=== 新しくプロジェクトを作る

この章でも、新しくプロジェクトを作ってゲームを作っていきましょう。先ほどと同じように、新しいプロジェクトを作ります。次に、先ほど作ったプログラム（３つのJavaファイル）をこのプロジェクトにコピーします。

=== 主人公を描いてみる

早速、主人公を描画してみましょう。画像を使って描いてもいいですが、とりあえず、四角形を主人公として描いてみます。

以下のコードを追加してみましょう。追加する場所は、４つ``if``文をかいたところの直後に追加してください。

```java
g.setColor(Color.GREEN);
g.fillRect(200,200,50,50);
```

このままでは、主人公が描画されただけで動きませので、次は主人公を動かすコードをかいてみましょう。

=== 主人公を動かす

主人公を動かすにはどうすればいいでしょうか。ずばり、主人公を描画する位置を変えるしかないですね。

位置を変えるには、位置の情報を毎回どこかに保存して、随時それの情報を見ることができるような、”箱”のようなものが必要です。

その”箱”とは、``変数``のことです！
位置を格納する変数``x``と``ｙ``を宣言しましょう。

ここでは、``while``文の直前に宣言します。

```java
//while文の上に宣言
int x = 200;
int y = 200;
```

変数を宣言したところで、今度は変数を値を変えられるようにしましょう。例えば、Upキーを押すと、上に動く、みたいな感じです。

これをするために、``if``文の中をかきかえましょう。

[source, java]
----
include::five/code/MyJPanel.java[lines=20..31]
----

少し注意することとして、y座標は、上にいくほど値が減っていくので、Upキーが押された時は、yの値を減らしています。

最後に、主人公を描く位置を、xとｙにすればOKです。

```java
g.setColor(Color.GREEN);
g.fillRect(x,y,50,50);
```

これで無事、動くようになったはずです。

==== y -= 5 って何？
``y -= 5``は、``y = y - 5``と同じ命令です。

では、``y = y - 5``はどういう命令なのかというと、``y - 5``した値を、再び``y``に代入するという処理です。
つまり、``y``の値を5だけ減らして``y``を更新します。

=== クラスを作ってみよう

このままでも、ゲームは実行できますが、実は、もっとわかりやすくプログラムを記述する方法があります。
クラスというものを使います。

クラスを説明する前に、次のコードを見てみましょう。

[source, java]
----
include::five/code/MyJPanel2.java[lines=14..28]
----

さっきよりも、主人公が何をしているか見やすくなったと思いませんか？

playerがmoveして、さらにplayerをdrawしているのが一目でわかるようになったと思います。

このようなコードを書くためには、``Player``クラスを新たに作る必要があります。

``ProjectExplorer``のところを右クリックして、``New→Class``で新しいクラスを作りましょう。クラス名は、``Player``で。

==== moveメソッドを定義する。

次に考えるべきことは、``Player``が何をするかです。このゲームでプレイヤーは移動をします。つまり、``Player``は移動するということを定義すればいいわけです。

クラスの中で、移動するなどの動作の定義のことを、**メソッド**と言います。では、移動の処理を行う、``move``というメソッドを定義してみましょう。

```java
public class Player {
    public void move(){

    }
}
```

今度は、``move``メソッドの具体的な処理を記述していきましょう。
``move``メソッドは、キーが押されたら、その方向にプレイヤーが動けばいいわけです。

```java
public class Player {
    public void move(){
        if(Key.up){
            y -= 5;
        }
        if(Key.down){
            y += 5;
        }
        if(Key.right){
            x += 5;
        }
        if(Key.left){
            x -= 5;
        }
    }
}
```

そう言えば、このコードどこかで見たような・・・。そうです！whileループの中に記述していたコードと全く一緒です！

先ほどかいたwhileループの中のこの処理を、``move``メソッド内にコピペしましょう。

==== フィールドを追加する

先ほど``move``メソッドを定義した時に、xとyの変数の宣言はコピペせずにやりましたね。では、xとyはどこに宣言すればいいのでしょう？

結論からいうと、以下の場所に宣言します。

```java
public class Player {
    int x;
    int y;

    public void move(){
        if(Key.up){
            y -= 5;
        }
        if(Key.down){
            y += 5;
        }
        if(Key.right){
            x += 5;
        }
        if(Key.left){
            x -= 5;
        }
    }
}
```

このxとyは、``move``メソッド内に宣言してはいけません。なぜなら、メソッド内に定義すると、その変数は**ローカル変数**となり、メソッドの実行が終了するたびに変数の状態が消えてしまうからです。

これを防ぐため、メソッドの外に定義します。このメソッドの外に定義された変数のことを、**フィールド**と呼びます。
こうすれば、``Player``はきちんと位置の情報を保持することが可能になります。

==== コンストラクタを作る

ここで、フィールドを見てみると、フィールドが初期化されていませんね。
フィールドの初期化は、**コンストラクタ**というものを使います。

``Player``クラス内に以下のように定義します。

```java
Player(int x, int y){
    this.x = x;
    this.y = y;
}
```

``this.x``は、フィールドのxを指し、ただのxは、コンストラクタの引数に渡ってきたxです。

他のクラスから使う時に、xとyの値を指定してPlayerを作ることができます。

==== drawメソッドを定義する。

``move``メソッドを定義したように、今度は``draw``メソッドも定義してみましょう。また、whileループの中の一部分をコピペすれば良いですね。

[source, java]
----
include::five/code/Player.java[lines=5..-1]
----

これで、``draw``メソッドが出来上がりました！


さあ、あとは、MyJPanelの方を少し直して完成です。

==== MyJPanelの修正
whileループの中を以下のように修正します。

[source, java]
----
include::five/code/MyJPanel2.java[lines=14..28]
----

でも、このままでは実行できません。実はクラスを使うには、クラスの**インスタンス**というものを作る必要があります。

とりあえず、このクラスのフィールドに、
```java
Player player = new Player(0,0);
```

のようなものを追加してみましょう。

[source, java]
----
include::five/code/MyJPanel2.java[lines=3..-1]
----

``new Player(0,0)``とすれば、初期座標(0,0)の``Player``を作ることができます。

もちろん、``new Player(200,200)``とすれば、初期座標(200,200)の``Player``を作ることができます。

こうすれば完成です！
あとは、自分で色々試してみるのもありですし、画像を読み込んで遊んでみても面白いと思います。
