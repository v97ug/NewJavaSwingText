= 第4章 キー入力

この章では、ゲーム作りでも重要な、キー入力をどうすればよいかを学びます。

== 新しいプロジェクトを作ろう

今まで、１つのプロジェクトの中でプログラムをかいてきましたが、ここで、新しく別のプロジェクトを作ってみましょう。

第２章でやったように、`Project Explorer`のところを右クリックして、`New`→`Project`で新しくプロジェクトが作れます。
名前は適当につけてください。

プロジェクトを作ったら、以前のプロジェクトから、2つのファイルをコピー＆ペーストしてきましょう。

次に、以下のコードを、`Key.java`としてクラスを作りましょう。

[source,java]
----
include::code/Key.java[lines=3..-1]
----

このクラスでやっていることは、キーが押されている間、変数がtrueになるということだけです。
例えば、`Upキー`が押されていると、その間だけ、変数`up`の値がtrueになります。
そのキーを離すと、変数の値が`false`になります。

Keyクラスが作れたところで、今度はこのクラスの使い方を学びましょう。
今度は、`MyJPanel.java`を編集していきます。変更箇所は、while文の中身です。

[source, java]
----
include::code/MyJPanel.java[lines=3..-1]
----

また、mainメソッドの中身も少しだけ追加します。終わりのほうに、`frame.addKeyListener(new Key());`を追加します。

[source, java]
----
include::code/SwingSample1.java[lines=3..-1]
----

`addKeyListener`をしないと、キー操作を受け付けないので、追加し忘れないようにしましょう。

ここまでくれば、プログラムがちゃんと実行できるようになると思います。


=== Keyクラスの使い方

```java
if(Key.up){
    g.setColor(Color.BLACK);
    g.drawString("UP!",100,100);
}
```
`if(Key.up)`で、`Upキー`が押されているかどうかを判定します。もし押されていれば、括弧の中の処理を実行します。
他のキーでも同じです。

=== Thread.sleep（_ _） ..zzzZZ
また、while文の終わりの方に`Thread.sleep(10)`などの文が追加されていますね。これは、10ミリ秒だけプログラムの動きを止めます。

```java
try {
    Thread.sleep(10);
} catch (InterruptedException e) {
    e.printStackTrace();
}
```

なぜこうするかというと、動きを少しずつ止めていかないと、描画のスピードが追いつかなくなったり、動きが重くなったりするからです。

`Thread.sleep`を囲んでいる`try catch`文は、例外処理というおまじないです。
